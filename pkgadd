#!/bin/ksh
# pkgadd - merge tarball to root

die() {
    printf '>>>>> error: %s\n' "${1}" >&2
    exit ${2:-1}
}

log() {
    printf '>>>> log: %s\n' "${1}" >&2
}

do_upgrade_check() {
    local ver
    [[ -d "${PKGTOOLS_DB}/${PKG_NAME}" ]] || die 'package not installed!'
    read -r ver < "${PKGTOOLS_DB}/${PKG_NAME}/version"
    [[ "${ver}" != "${PKG_VERSION}" ]]    || die 'package version is the same'
}

upgrade() {
    do_upgrade_check
    replace_files=()
    local to_add ff
    for f in `tar -t -f "${PKGADD_TAR}"`; {
        ff=${f:2}
        to_add=1
        [[ -d "${root}/${ff}" ]] && continue
        for ptrn in ${PKGADD_IGNORE[@]}; {
            # we need ${ptrn} to be unquoted
            [[ "${ff}" == ${ptrn} ]] && to_add=0
        }
        [[ ${to_add} -eq 1 ]] && replace_files+=("${f}")
    }
    tar -C "${root}" -x -z -f "${PKGADD_TAR}" "${replace_files[@]}"
}

install() {
}

usage() {
    cat << EOF
usage:
pkgadd [opts] <pkgtar>
    -f  force package installation
    -u  upgrade package
    -r  use alternate root
    -h  print this message
EOF
}

parse_args() {
    while [[ "${1}" ]]; do
        case ${1} {
        (-h) usage              ;;
        (-f) force=1            ;;
        (-u) upgrade=1          ;;
        (-r) root="${2}"; shift ;;
        (*)  PKGADD_TAR="${1}"  ;;
        }
        shift
    done
}

main() {
    parse_args "${@}"
    [[ "${PKGADD_TAR}" != *\.pkg\.* ]] &&
        die 'not package tarball'
    PKGADD_TAR="${PKGADD_TAR##*/}"
    PKG_NAME="${PKGADD_TAR%\#*}"
    PKG_VERSION="${PKGADD_TAR#*\#}"
    PKG_VERSION="${PKG_VERSION%\.pkg*}"
}

PKGTOOLS_DB='/var/lib/pkg'
PKGADD_IGNORE=('etc/*')
PKGADD_TAR=""
PKG_NAME=""
PKG_VERSION=""
root='/'

main "${@}"
