#!/bin/ksh
# pkgmk - make package

die() {
    printf 'error: %s\n' "${1}" >&2
    exit ${2:-1}
}

log() {
    printf 'log: %s\n' "${1}" >&2
}

check() {
    [[ ! -f "${PKGMK_ROOT}/pkgfile" ]]   && die 'pkgfile not found'

    . "${PKGMK_ROOT}/pkgfile"

    [[ ! "${name}" ]]                    && die 'name not in pkgfile'
    [[ ! "${version}" ]]                 && die 'version not in pkgfile'
    [[ ! "${release}" ]]                 && die 'release not in pkgfile'
    [[ ! `typeset +f` = *build* ]]       && die 'build function not in pkgfile'

    [[ ! "${depends}" ]]                 && depends=()
    [[ ! "${source}" ]]                  && source=()

    for i in ${depends[@]}; {
        [[ ! -d "${PKGTOOLS_DB}/${i}" ]] &&
            die "dependency ${i} not installed"
    }
    unset i
}

extract() {
    # TODO: maybe consider using file?
    log "extracting ${1}"
    case ${1} {
    (*\.tar*) tar -x -f "${1}" -C "${SRC}" ;;
    (*\.zip*) unzip -q "${1}" -d "${SRC}"  ;;
    }
}

handle_source() {
    local i
    for i in ${source[@]}; {
        [[ "${i}" = @(https|http|ftp)://* ]] && {
            [[ ! -f "${PKGMK_ROOT}/${i##*/}" ]] && {
                log "downloading ${i##*/}"
                "${PKGMK_DOWNLOAD_PROG}" "${i}"
            }
            i="${i##*/}"
        }
        [[ ! -f "${i}" ]] && die "${i} not present in build directory"
        [[ "${i}" = *@(\.tar|\.zip)* ]] && {
            extract "${i}"
            continue
        }
        [[ -f "${i}" ]] && cp "${PKGMK_ROOT}/${i}" "${SRC}/${i}"
    }
}

write_contents() {
    [[ -f "${PKGMK_ROOT}/contents" ]] && return 0
    _files=()
    contents() {
        for i in "${1}"/*; {
            [[ -d "${i}" ]] &&  contents "${i}"
            [[ -f "${i}" ]] && _files+=("${i/${PKG}\//}")
        }
    }
    contents "${PKG}"
    for i in ${_files[@]}; {
        echo "${i}" >> "${PKGMK_ROOT}"/contents
    }

    unset    _files
    unset -f contents
}

handle_md5sum() {
    create_md5sum() {
        log 'creating md5sum'
        local i
        for i in "${SRC}"/*; {
            [[ -f "${i}" ]] &&
                md5sum "${i##*/}" >> "${PKGMK_ROOT}/md5sum"
        }
    }

    [[ ! -f "${PKGMK_ROOT}/md5sum" ]] &&
        create_md5sum
    md5sum --status -c "${PKGMK_ROOT}/md5sum" || die 'md5sum check failed' # FIX: GNU blob

    unset -f create_md5sum
}

init() {
    local i
    for i in "${PKG}" "${SRC}"; {
        [[ ! -d "${i}" ]] && mkdir -p "${i}"
    }
    check
}

usage() {
    cat << EOF
usage:
pkgmk [opts]
opts:
    -k  keep work directory
    -h  print this help message
    -M  ignore md5sum checking
EOF
}

parse_args() {
    local i
    for i; {
        case ${i} {
        (-w) _keep_work=1  ;;
        (-h) usage         ;;
        (-M) _ignore_md5=1 ;;
        }
    }
}

# TODO: move PKGTOOLS_DB to a sep file
PKGTOOLS_DB="/var/lib/pkg"
PKGMK_DOWNLOAD_PROG='wget'
PKGMK_ROOT="${PWD}"
PKGMK_WORK="${PKGMK_ROOT}/work"
PKG="${PKGMK_WORK}/build"
SRC="${PKGMK_WORK}/src"

init
handle_source
cd "${SRC}"
[[ "${_ignore_md5}" -eq 0 ]] && handle_md5sum
build
write_contents
