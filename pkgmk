#!/bin/ksh
# pkgmk - make package

die() {
    printf '>>>>> error: %s\n' "${1}" >&2
    exit ${2:-1}
}

log() {
    printf '>>>>> log: %s\n' "${1}" >&2
}

check() {
    local i
    [[ ! -f "${PKGMK_ROOT}/pkgfile" ]]   && die 'pkgfile not found'

    . "${PKGMK_ROOT}/pkgfile"

    [[ ! "${name}" ]]                    && die 'name not in pkgfile'
    [[ ! "${version}" ]]                 && die 'version not in pkgfile'
    [[ ! `typeset +f` = *build* ]]       && die 'build function not in pkgfile'

    [[ ! "${depends}" ]]                 && depends=()
    [[ ! "${source}" ]]                  && source=()

    [[ ${_check_depends} -ne 0 ]] && for i in ${depends[@]}; {
        [[ ! -d "${PKGTOOLS_DB}/${i}" ]] &&
            die "dependency ${i} not installed"
    }
}

extract() {
    # TODO: uncompress each common compress types
    log "extracting ${1}"
    case ${1} {
    (*\.tar\.gz)
        gunzip -d "${1}" -c | tar -x -f - -C "${SRC}"
        ;;
    (*\.tar\.bzip)
        bzip -c "${1}" | tar -x -f - -C "${SRC}"
        ;;
    (*\.tar)
        tar -x -f "${1}" -C "${SRC}"
        ;;
    (*\.zip)
        unzip -q "${1}" -d "${SRC}"
        ;;
    }
}

handle_source() {
    local i
    for i in ${source[@]}; {
        [[ "${i}" = @(https|http|ftp)://* ]] && {
            [[ ! -f "${PKGMK_ROOT}/${i##*/}" ]] && {
                log "downloading ${i##*/}"
                "${PKGMK_DOWNLOAD_PROG}" "${i}"
            }
            i="${i##*/}"
        }
        [[ ! -f "${i}" ]] && die "${i} not present in build directory"
        [[ "${i}" = *@(\.tar|\.zip)* ]] && extract "${i}"
        [[ -f "${i}" ]] && cp "${PKGMK_ROOT}/${i}" "${SRC}/${i}"
    }
}

handle_md5sum() {
    create_md5sum() {
        log 'creating md5sum'
        local i
        for i in "${SRC}"/*; {
            [[ -f "${i}" ]] &&
                md5 "${i##*/}" >> "${PKGMK_ROOT}/md5sum"
        }
    }

    [[ ! -f "${PKGMK_ROOT}/md5sum" ]] &&
        create_md5sum
    md5 -c "${PKGMK_ROOT}/md5sum" || die 'md5sum check failed' # FIX: GNU blob

    unset -f create_md5sum
}

mkpkg() {
    local i db
    db="${PKG}${PKGTOOLS_DB}/${name}"
    cd "${PKG}"
    mkdir -p "${db}"

    echo "${version}" > "${db}/version"
    echo "${USER}" > "${db}/owner"
    echo "${depends[@]}" | tr ' ' '\n' > "${db}/depends"

    # remove ./ from the path
    find . -type f -exec ksh -c 'printf "%s\n" {} | cut -c 3-' \; > "${db}/contents"

    tar -f - -c `< "${db}/contents"` | gzip > "${PKGMK_ROOT}/${name}#${version}.pkg.tar.gz"
    log 'package created'

    # these are nice to have
    cp "${db}/"{owner,contents} "${PKGMK_ROOT}"
}

usage() {
    cat << EOF
usage: pkgmk [opts]
opts:
    -w  keep work directory
    -h  print this help message
    -M  ignore md5sum checking
    -D  don't check dependencies
EOF
    exit 0
}

parse_args() {
    local i
    for i; {
        case ${i} {
        (-w) _keep_work=1     ;;
        (-h) usage            ;;
        (-M) _ignore_md5=1    ;;
        (-D) _check_depends=0 ;;
        }
    }
}

main() {
    parse_args "${@}"

    local i
    for i in "${PKG}" "${SRC}"; {
        [[ ! -d "${i}" ]] && mkdir -p "${i}"
    }

    check
    handle_source
    [[ ${_ignore_md5} -eq 0 ]] && handle_md5sum
    cd "${SRC}"
    build
    mkpkg
    [[ ${_keep_work} -eq 0 ]] && rm -rf "${PKGMK_WORK}"
}

# TODO: move PKGTOOLS_DB to a sep file
PKGTOOLS_DB='/var/lib/pkg'
PKGMK_DOWNLOAD_PROG='wget'
PKGMK_ROOT="${PWD}"
PKGMK_WORK="${PKGMK_ROOT}/work"
PKG="${PKGMK_WORK}/build"
SRC="${PKGMK_WORK}/src"

main "${@}"
